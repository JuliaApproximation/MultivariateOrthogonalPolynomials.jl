using MultivariateOrthogonalPolynomials, FastTransforms, BlockBandedMatrices, Plots, LinearAlgebra, StaticArrays
pyplot()


####
# Solving
#
#   (Œî + k^2*I) * u = f
#
# in a unit disk |ùê±| ‚â§ 1, 
# using orthogonal polynomials (in x and y) in a disk
# with the weight (1-|ùê±|^2) = (1-x^2-y^2)
####

Z = Zernike(1)
W = Weighted(Z) # w*Z
x, y = coordinates(W)
Œî = Z \ laplacian(W)
S = Z \ W # identity


k = 20
L = Œî + k^2 * S # discretisation of Helmholtz
f = @.(cos(x * exp(y)))

u = W * (L \ (Z \ f))
contourf(u)


# One can also fix the discretisation size

N = 20
Z‚Çô = Z[:,Block.(1:N)]
W‚Çô = W[:,Block.(1:N)]
L‚Çô = L[Block.(1:N),Block.(1:N)]

u = W‚Çô * (L‚Çô \ (Z‚Çô \ f))
contourf(u)


# We can also do eigenvalues of the Laplacian
N = 20
Œî‚Çô = Œî[Block.(1:N),Block.(1:N)]
S‚Çô = S[Block.(1:N),Block.(1:N)]

Œª,Q = eigen(Symmetric(Matrix(Œî‚Çô)), Symmetric(Matrix(S‚Çô)))

contourf(W‚Çô * Q[:,end-10])